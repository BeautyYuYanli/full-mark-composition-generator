schemes['computer_science'] = {
    //三个学科 其中第一个是主学科 后两个是相关学科
    subj: ['计算机科学', '哲学', '数学'],
    //至少1个有关第一个学科的 字面上可以解释为物理结构的词
    stru: ['二叉树', '红黑树', 'Fibonacci堆', "主席树"],
    //至少9个有关第一个学科的名人名言
    cele: [
        ['马丁·福勒', '任何人都可以编写计算机可以理解的代码，而好的程序员编写人类可以理解的代码。'],
        ['肖恩·派仁特', '好的代码简短、易懂且美观，挑战在于如何到达那种境界。'],
        ['史蒂夫·麦克康奈尔', '好的代码是它自己最好的注解。 在您要添加注释时，问问自己：“如何改进代码，以便不需要此注释？”'],
        ['林纳斯·托瓦兹', '差程序员担心代码，好程序员担心数据结构及其关系。'],
        ['菲尔·卡尔顿', '在计算机科学中只有两件困难的事情：缓存失效和命名规范。'],
        ['艾伦·佩利', '有两种编写无错误程序的方法，但只有第三种有用。'],
        ['大卫.韦勒', '计算机科学中的任何问题都可以使用另一层次间接解决。 但这通常会带来更多问题。'],
        ['尼尔·福特', '对于动态内存分配来说，生命太短暂了。'],
        ['哈罗德·贝尔森', '程序必须能够供人们阅读，并仅在偶然间使机器执行。'],
    ],
    //至少3个有关第一个学科的思想（主义）
    prin: ['构造', '直觉', '逻辑'],
    //至少3个有关第一个学科的性质
    prop: ['有限', '离散', '无后效'],
    //至少6个有关第一个学科的概念
    conc: ['P=NP猜想', 'AC自动机', '轮廓动态规划', '模拟退火', '哈密顿通路的证明', '最大流最小割定理', '网络流'],
    init: function (){
        shuffle(this.stru);
        shuffle(this.cele);
        shuffle(this.prin);
        shuffle(this.prop);
        shuffle(this.conc);
    }
}
